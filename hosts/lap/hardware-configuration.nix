# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  pkgs,
  config,
  lib,
  modulesPath,
  ...
}:
{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  # NOTE: https://bugs.launchpad.net/ubuntu/+source/linux-oem-6.1/+bug/2017277
  # https://bugs.launchpad.net/ubuntu/+source/linux-oem-6.1/+bug/2017277/comments/4
  environment.etc."modprobe.d/70-rtw89.conf".text = ''
    options rtw89_pci disable_clkreq=y disable_aspm_l1=y disable_aspm_l1ss=y
    options rtw89pci disable_clkreq=y disable_aspm_l1=y disable_aspm_l1ss=y
  '';

  boot = {
    loader = {
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
      systemd-boot.configurationLimit = 100;
    };
    initrd = {
      availableKernelModules = [
        "nvme"
        "xhci_pci"
        "uas"
        "sd_mod"
      ];
      kernelModules = [
        "cpufreq_ondemand"
        "cpufreq_powersave"
      ];

      luks = {
        devices."luks-rpool-nvme-Samsung_SSD_990_PRO_2TB_S7DNNU0X417249D-part2".device =
          "/dev/disk/by-uuid/47848e3e-66c6-43e6-a878-096b608c098d";
        devices."swapDevice".device = "/dev/disk/by-uuid/de8dd340-6c95-471a-9394-db5bef325386";
      };
    };
    kernelModules = [ "kvm-amd" ];

    # support for building nix packages for rp4
    binfmt.emulatedSystems = [ "aarch64-linux" ];

    # NOTE: kernel is pinned with support for zfs
    kernelPackages = pkgs.linuxPackages_6_12;
    extraModulePackages = [ pkgs.linuxKernel.packages.linux_6_12.v4l2loopback ];
  };

  fileSystems = {
    "/" = {
      device = "rpool/root";
      fsType = "zfs";
    };
    "/home" = {
      device = "rpool/home";
      fsType = "zfs";
    };
    "/nix" = {
      device = "rpool/nix";
      fsType = "zfs";
    };
    "/var" = {
      device = "rpool/var";
      fsType = "zfs";
    };
    "/boot" = {
      device = "/dev/disk/by-uuid/9152-FBB4";
      fsType = "vfat";
    };
  };

  # TODO: use https://github.com/NixOS/nixpkgs/blob/release-24.11/nixos/modules/services/hardware/amdvlk.nix
  # TODO: use https://github.com/NixOS/nixpkgs/blob/release-24.11/nixos/modules/services/hardware/amdgpu.nix
  # TODO: amdvlk?
  hardware = {
    graphics = {
      enable = true;
      enable32Bit = true;

      extraPackages = with pkgs; [
        rocmPackages.clr.icd
        mesa
        mesa.opencl
      ];
      extraPackages32 = with pkgs.driversi686Linux; [
        mesa
        mesa.opencl
      ];
    };
    amdgpu = {
      opencl.enable = true;
      initrd.enable = true;
    };
  };

  environment.sessionVariables.VDPAU_DRIVER = "radeonsi";

  services.xserver.videoDrivers = [ "amdgpu" ];

  swapDevices = [ { device = "/dev/disk/by-uuid/a1e33eb4-590f-4a58-8d01-97297fa740f8"; } ];
  zramSwap.enable = true;

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
